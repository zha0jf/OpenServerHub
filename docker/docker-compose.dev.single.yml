# 开发环境Docker Compose配置 - 单容器版本（集成监控组件）
version: '3.8'

services:

  # 全栈开发服务（后端+前端）
  app:
    build:
      context: ..
      dockerfile: docker/backend.dev.dockerfile
    container_name: openserverhub-dev
    environment:
      # 数据库配置 - 开发环境使用SQLite
      DATABASE_URL: sqlite:///./data/openserverhub.db
      
      # 应用配置
      APP_NAME: OpenServerHub
      APP_VERSION: 1.0.0
      DEBUG: "true"
      
      # CORS配置
      CORS_ORIGINS: ""
      
      # IPMI配置
      IPMI_TIMEOUT: "30"
      IPMI_RETRY_COUNT: "3"
      
      # 监控配置
      MONITORING_ENABLED: "true"
      MONITORING_INTERVAL: "60"
      
      # 定时任务配置
      SCHEDULER_ENABLED: "true"
      SCHEDULER_TIMEZONE: Asia/Shanghai
      
      # 前端配置
      NODE_ENV: development
      REACT_APP_API_URL: ""
      REACT_APP_WS_URL: ""
    ports:
      - "8000:8000"  # 后端API
      - "3000:3000"  # 前端开发服务器
    volumes:
      # 后端代码热重载
      - ../backend:/app/backend
      # 前端代码热重载（排除node_modules目录）
      - ../frontend:/app/frontend
      - /app/frontend/node_modules
      # SQLite数据持久化
      - dev_data:/app/data
    networks:
      - openserverhub-dev-network
      - monitoring
    working_dir: /app
    command: >
      sh -c "
        echo '=== 启动OpenServerHub开发环境 ===' &&
        echo '正在初始化后端数据库...' &&
        cd /app/backend &&
        python init_db.py &&
        echo '启动后端服务...' &&
        cd /app/backend &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/backend &
        BACKEND_PID=\$! &&
        echo '等待后端服务启动...' &&
        sleep 5 &&
        echo '启动前端开发服务器...' &&
        cd /app/frontend &&
        npm start -- --host 0.0.0.0 &
        FRONTEND_PID=\$! &&
        echo '=== 开发环境启动完成 ===' &&
        echo '后端API: http://\${SERVER_IP:-localhost}:8000' &&
        echo '前端应用: http://\${SERVER_IP:-localhost}:3000' &&
        echo 'API文档: http://\${SERVER_IP:-localhost}:8000/docs' &&
        echo '按 Ctrl+C 停止服务' &&
        wait \$BACKEND_PID \$FRONTEND_PID
      "

  # Prometheus监控服务
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../monitoring/prometheus/rules:/etc/prometheus/rules
      - ../monitoring/prometheus/targets:/etc/prometheus/targets
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana可视化服务
  grafana:
    image: grafana/grafana-enterprise:10.1.0
    container_name: grafana-dev
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager告警服务
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager-dev
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager/alertmanager.dev.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - monitoring

  # IPMI Exporter服务
  ipmi-exporter:
    image: prometheuscommunity/ipmi-exporter:v1.4.0
    container_name: ipmi-exporter-dev
    ports:
      - "9290:9290"
    volumes:
      - ../monitoring/ipmi-exporter/ipmi_local.yml:/config/ipmi_local.yml
    command:
      - '--config.file=/config/ipmi_local.yml'
    restart: unless-stopped
    networks:
      - monitoring

networks:
  openserverhub-dev-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  dev_data:
    driver: local
  prometheus_data:
  grafana_data:
  alertmanager_data: