# 开发环境Docker Compose配置 - 仅SQLite版本
version: '3.8'

# 加载环境变量配置
env_file:
  - .env.dev.network

services:

  # 后端开发服务
  backend:
    build:
      context: ..
      dockerfile: docker/backend.dev.dockerfile
    container_name: openserverhub-backend-dev
    environment:
      # 数据库配置 - 开发环境使用SQLite
      DATABASE_URL: sqlite:///./data/openserverhub.db
      
      # 应用配置
      APP_NAME: OpenServerHub
      APP_VERSION: 1.0.0
      DEBUG: "true"
      TZ: Asia/Shanghai
      
      # CORS配置
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # IPMI配置
      IPMI_TIMEOUT: "30"
      IPMI_RETRY_COUNT: "3"
      
      # 监控配置
      MONITORING_ENABLED: "true"
      MONITORING_INTERVAL: "60"
      
      # 定时任务配置
      SCHEDULER_ENABLED: "true"
      SCHEDULER_TIMEZONE: Asia/Shanghai
    ports:
      - "8000:8000"
    volumes:
      # 代码热重载
      - ../backend:/app
      # SQLite数据持久化
      - backend_dev_data:/app/data
      # 防止容器内安装node_modules
      - /app/node_modules

    networks:
      - openserverhub-dev-network
    command: >
      sh -c "
        echo '正在初始化数据库...' &&
        python init_db.py &&
        echo '启动后端服务...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app
      "

  # 前端开发服务
  frontend:
    image: node:22-alpine
    container_name: openserverhub-frontend-dev
    working_dir: /app
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL}
      TZ: Asia/Shanghai
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - openserverhub-dev-network
    command: >
      sh -c "
        echo '配置npm国内源...' &&
        npm config set registry https://registry.npmmirror.com &&
        echo '安装依赖...' &&
        npm install &&
        echo '启动前端开发服务器...' &&
        npm start -- --host 0.0.0.0
      "



networks:
  openserverhub-dev-network:
    driver: bridge

volumes:
  backend_dev_data: