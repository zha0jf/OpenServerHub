# 生产环境Docker Compose配置 - SQLite版本
version: '3.8'

services:

  # 后端生产服务
  backend:
    build:
      context: ..
      dockerfile: docker/backend.prod.sqlite.dockerfile
    container_name: openserverhub-backend-prod
    environment:
      # 数据库配置 - 生产环境使用SQLite
      DATABASE_URL: sqlite:///./data/openserverhub.db
      
      # 应用配置
      APP_NAME: OpenServerHub
      APP_VERSION: 1.0.0
      DEBUG: "false"
      TZ: Asia/Shanghai
      
      # CORS配置
      CORS_ORIGINS: ""
      
      # IPMI配置
      IPMI_TIMEOUT: "30"
      IPMI_RETRY_COUNT: "3"
      
      # 监控配置
      MONITORING_ENABLED: "true"
      MONITORING_INTERVAL: "5"
      
      # 定时任务配置
      SCHEDULER_ENABLED: "true"
      SCHEDULER_TIMEZONE: Asia/Shanghai
      
      # 安全配置
      SECRET_KEY: "your-secret-key-here-change-in-production"
    ports:
      - "8000:8000"
    volumes:
      # SQLite数据持久化
      - backend_prod_data:/app/data
      # 日志持久化
      - backend_prod_logs:/app/logs
      # 共享Prometheus目标配置目录
      - ../monitoring/prometheus/targets:/etc/prometheus/targets
    networks:
      - openserverhub-prod-network
      - monitoring
    restart: unless-stopped

  # Prometheus监控服务
  prometheus:
    image: prom/prometheus:v3.7.1
    container_name: prometheus-prod
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../monitoring/prometheus/rules:/etc/prometheus/rules
      - ../monitoring/prometheus/targets:/etc/prometheus/targets
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana可视化服务
  grafana:
    image: grafana/grafana-enterprise:12.2.1
    container_name: grafana-prod
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - TZ=Asia/Shanghai
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager告警服务
  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager-prod
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - monitoring

  # IPMI Exporter服务
  ipmi-exporter:
    image: prometheuscommunity/ipmi-exporter:v1.10.1
    container_name: ipmi-exporter-prod
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "9290:9290"
    volumes:
      - ../monitoring/ipmi-exporter/ipmi_local.yml:/config/ipmi_local.yml
    command:
      - '--config.file=/config/ipmi_local.yml'
    restart: unless-stopped
    networks:
      - monitoring

networks:
  openserverhub-prod-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  backend_prod_data:
    driver: local
  backend_prod_logs:
    driver: local
  prometheus_data:
  grafana_data:
  alertmanager_data: